---
import '../styles/section.css';
import Layout from '../layouts/Layout.astro';
import Button from '../components/Button.astro';
import CTA from '../components/pieces/CTA.astro';

import compare from '../data/comparison.json';
---

<Layout title="Compare">
    <section class="section top">
        <h3 class="section-heading">
            The Comparison
        </h3>
        <h2 class="section-title">
            What makes Ramo better than Them?
        </h2>
        <p class="section-intro">Choosing the right web design service can be frustrating, but the search ends here. This comparison shows how RamoSites stands out in service, cost, performance, and user experience. Whether it's speed, security, or an intuitive design, everything you need is covered.</p>
    </section>
    <section id="buttons" class="section">
        {compare.map(c => (
        <Button
            type="secondary"
            link="#!"
            text={c.title}
            idname={c.slug}
            classname="choice"
            data-slug={c.slug} />
        ))}
    </section>
    <section id="detail" class="section">
        <div class="section-container">
            <div class="section-content detail visible">
                <h3>Click one of the buttons above to see a comparison below.</h3>
            </div>
            {compare.map(c => (
            <div id={c.slug} class="section-content detail hidden">
                <div class="section-image">
                    <img src={c.image} alt={c.title} />
                </div>
                <div class="section-text">
                    <p class="detail-description">{c.description}</p>
                    <p class="detail-example">{c.examples}</p>
                </div>
            </div>
            ))}
        </div>
    </section>
    <section id="table" class="section">
        <table>
            <thead>
                <tr>
                    <th class="category empty"></th>
                    <th class="factor empty"></th>
                    <th id="selected-title" class="comp title"></th>
                    <th class="rs title"><h3>RamoSites</h3></th>
                </tr>
            </thead>
            <tbody id="table-body">
                <!-- Dynamic content will be inserted here -->
            </tbody>
        </table>
    </section>
    <CTA title="Get Started!">
        <span slot="content">Ready to get started building your dreams?<br />Fill out the form today!</span>
        <Button slot="buttons" type="primary" icon="tabler:arrow-big-right-line" link="/start" text="Get Started" />
    </CTA>
</Layout>

<style>
    .section-content {
        text-align: center;
    }
    #buttons {
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        margin-top: 3em;
    }
    #detail .section-container {
        background-color: var(--gray-contrast);
        border: 1px solid var(--gray-mid);
        border-radius: var(--border-radius);
        display: flex;
        flex-wrap: wrap;
        justify-content: center;
        align-items: center;
        max-width: 1000px;
        padding: 1.5em 2em;
        margin: 1.5em auto 4em;
        min-height: 14em;
    }
    #detail .section-content .section-image {
        width: 20%;
    }
    #detail .section-content .section-image img {
        width: 100%;
        height: auto;
    }
    #detail .section-content .section-text {
        width: 75%;
        text-align: left;
    }
    #detail .section-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    #detail .section-content.hidden {
        display: none;
    }
    .detail-description {
        margin-bottom: 1em;
    }
    .detail-example {
        margin-bottom: .5em;
    }
</style>

<style is:inline>
    table {
        width: 100%;
        border-collapse: collapse;
        table-layout: fixed;
    }
    td, th {
        border: 1px solid var(--gray-mid);
        padding: .5em;
    }
    .empty {
        border: none;
        background-color: transparent !important;
    }
    .category-title {
        font-size: 1em;
        font-weight: 700;
    }
    .factor-title {
        font-size: .9em;
        font-weight: 800;
    }
    .factor-text {
        font-size: .7em;
    }
    .comp-text, .rs-text {
        font-size: .8em;
    }
    .title {
        padding: 1em;
        font-size: 1.4em;
    }
    .category {
        writing-mode: vertical-rl; /* Makes the text vertical */
        text-align: center;
        transform: rotate(180deg); /* Rotates the text 180 degrees to make it upright */
        width: 4%;
        white-space: nowrap;
    }
    .factor {
        width: 22%;
        background-color: var(--gray-contrast);
    }
    .rs, .comp {
        width: 37%;
    }
    .rs {
        background-color: color-mix(in oklab, var(--primary) 25%, var(--background));
    }
    .comp {
        background-color: color-mix(in oklab, var(--secondary) 25%, var(--background));
    }

    @media (max-width: 800px) {
        .title {
            font-size: 1.1em;
        }
        .factor-category {
            font-size: .7em;
        }
        .factor-title {
            font-size: .7em;
        }
        table p {
            font-size: .7em;
        }
    }
</style>

<script>
    import factors from '../data/factors.json';
    import compare from '../data/comparison.json';
    import rscomp from '../data/rscomp.json';

    const rs:any = rscomp;
    const buttons:any = document.querySelectorAll('.choice');
    const tableBody:any = document.querySelector('#table-body');

    // Populate table with comparison column blank
    factors.forEach(category => {
        category.contents.forEach((factor, index) => {
            // Create the table row
            const row = document.createElement('tr');

            // Add the category cell only for the first row of the category
            if (index === 0) {
                const categoryCell = document.createElement('td');
                categoryCell.classList.add('category');
                categoryCell.rowSpan = category.count;
                categoryCell.innerHTML = `<h4 class="factor-category">${category.title}</h4>`;
                row.appendChild(categoryCell);
            }

            // Add the factor cell
            const factorCell = document.createElement('td');
            factorCell.classList.add('factor');
            factorCell.innerHTML = `
            <h5 class="factor-title">${factor.title}</h5>
            <p class="factor-text">${factor.text}</p>`;
            row.appendChild(factorCell);

            // Add the blank comp cell
            const compCell = document.createElement('td');
            compCell.classList.add('comp');
            compCell.id = factor.key;
            compCell.innerHTML = `<p class="comp-text"></p>`; // Initially blank
            row.appendChild(compCell);

            // Add the rs cell
            const rsCell = document.createElement('td');
            rsCell.classList.add('rs');
            rsCell.innerHTML = `<p class="rs-text">${rs[factor.key]}</p>`;
            row.appendChild(rsCell);

            // Append the row to the table body
            tableBody.appendChild(row);
        });
    });

    // Add functionality to buttons
    buttons.forEach((button:any) => {
        button.addEventListener('click', (e:any) => {
            const slug = e.target.id;
            showDetail(slug);
            fillTable(slug);
            highlightButton(e.target);
        });
    });

    function highlightButton(target:any) {
        buttons.forEach((btn:any) => {
            btn.classList.contains('primary') ? btn.classList.remove('primary') : null;
            btn.classList.contains('secondary') ? null : btn.classList.add('secondary');
        });
        target.classList.remove('secondary');
        target.classList.add('primary');
    }

    function showDetail(slug:any) {
        document.querySelectorAll('.detail').forEach(el => {
            el.classList.add('hidden');
            el.classList.remove('visible');
        });
        const detail = document.querySelector(`#${slug}.detail`);
        detail?.classList.remove('hidden');
        detail?.classList.add('visible');
    }

    function fillTable(slug:any) {
        const selected:any = compare.find(c => c.slug === slug);
        const selectedFactors = selected?.factors;
        const selectedTitle:any = document.querySelector('#selected-title');
        const comparisonCells = tableBody.querySelectorAll('.comp');

        selectedTitle.innerHTML = `<h3>${selected.title}</h3>`;
        comparisonCells.forEach((cell:any) => {
            cell.innerHTML = `<p>${selectedFactors[cell.id]}</p>`;
        });
    }
</script>