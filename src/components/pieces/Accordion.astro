---
import { Icon } from "astro-icon";

interface Item {
    title: string;
    text: string;
}
interface Props {
    items: Array<Item>;
}
const { items } = Astro.props;
---

{ items.map(({ title, text }) => (
    <accordion-item class="content-item">
        <div class="item-icontitle">
            <h4 class="item-title">{title}</h4>
            <span class="item-icon">
                <Icon class="closed-caret" name="tabler:caret-down" />
                <Icon class="open-caret" name="tabler:caret-up-filled" />
            </span>
        </div>
        <div class="item-text">
            <p set:html={text}></p>
        </div>
    </accordion-item>
)) }

<style>
    :root {
        --expansion: .5s ease-out;
    }
    .content-item {
        width: 100%;
        margin-bottom: 2.5em;
        display: flex;
        flex-direction: column;
        max-height: 100%;
    }
    .item-icontitle {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .item-icon {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 2em;
        height: auto;
        color: var(--accent-contrast);
    }
    .item-icon svg {
        height: 2em;
        width: auto;
    }
    .item-icon .open-caret {
        display: none;
    }
    .item-icon .closed-caret {
        display: block;
    }
    .open .item-icon .open-caret {
        display: block;
    }
    .open .item-icon .closed-caret {
        display: none;
    }
    .item-text {
        display: grid;
        grid-template-rows: 0fr;
        transition: grid-template-rows var(--expansion), opacity var(--expansion), margin var(--expansion), padding var(--expansion), border var(--expansion);
        opacity: 0;
        color: var(--gray);
        font-size: .9em;
    }
    .open .item-text {
        grid-template-rows: 1fr;
        opacity: 1;
        margin: 0 1.5em 0 .5em;
        padding: 1em 1.2em;
        padding-top: .7em;
        border: 1px solid var(--primary);
        border-radius: 0px 0px 20px 20px;
        border-top: none;
        border-right: none;
    }
    .item-text p {
        overflow: hidden;
    }
</style>

<script>
    class AccordionItem extends HTMLElement {
        isClosed: boolean = true;
        connectedCallback() {
            const allItems: NodeListOf<HTMLElement> = document.querySelectorAll('.content-item');
            const item: HTMLElement | null = this;

            this.addEventListener('click', () => {
                if(this.isClosed) {
                    allItems.forEach( item => item.classList.remove("open") );
                    item!.classList.add("open");
                    this.isClosed = false;
                } else {
                    item!.classList.remove("open");
                    this.isClosed = true;
                }
            });
        }
    }
    customElements.define('accordion-item', AccordionItem);
</script>