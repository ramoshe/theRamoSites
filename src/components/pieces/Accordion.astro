---
import { Icon } from "astro-icon";

interface Item {
    title: string;
    text: string;
}
interface Props {
    items: Array<Item>;
}
const { items } = Astro.props;
---
{ items.map(({ title, text }) => (
    <accordion-item class="content-item">
        <div class="item-icontitle">
            <h4 class="item-title">{title}</h4>
            <span class="item-icon">
                <Icon class="closed" name="tabler:caret-down" />
                <Icon class="open" name="tabler:caret-up-filled" />
            </span>
        </div>
        <div class="item-text">
            <p set:html={text}></p>
        </div>
    </accordion-item>
)) }

<style>
    :root {
        --expansion: .5s ease-out;
    }
    .content-item {
        width: 100%;
        margin-bottom: 2.5em;
        display: flex;
        flex-direction: column;
        max-height: 100%;
    }
    .item-icontitle {
        display: flex;
        justify-content: space-between;
    }
    .item-icon {
        display: flex;
        width: 30px;
        color: var(--accent-contrast);
    }
    .item-icon .open {
        display: none;
    }
    .item-text {
        display: grid;
        grid-template-rows: 0fr;
        transition: grid-template-rows var(--expansion), opacity var(--expansion), margin var(--expansion), padding var(--expansion), border var(--expansion);
        opacity: 0;
        color: var(--gray);
        font-size: .9em;
    }
    .item-text.open {
        grid-template-rows: 1fr;
        opacity: 1;
        margin: 0 1.5em 0 .5em;
        padding: 1em 1.2em;
        padding-top: .7em;
        border: 1px solid var(--primary);
        border-radius: 0px 0px 20px 20px;
        border-top: none;
        border-right: none;
    }
    .item-text p {
        overflow: hidden;
    }
</style>

<script>
    class AccordionItem extends HTMLElement {
        isClosed: boolean = true;
        connectedCallback() {
            const allAnswers: NodeListOf<HTMLElement> = document.querySelectorAll('.item-text');
            const allOpen: NodeListOf<HTMLElement> = document.querySelectorAll('.open');
            const allClosed: NodeListOf<HTMLElement> = document.querySelectorAll('.closed');
            const answer: HTMLElement | null = this.querySelector('.item-text');
            const closedIcon: HTMLElement | null = this.querySelector('.closed');
            const openIcon: HTMLElement | null = this.querySelector('.open');

            this.addEventListener('click', () => {
                if(this.isClosed) {
                    allAnswers.forEach( text => text.classList.remove("open") );
                    allOpen.forEach( icon => icon.style.display = "none" );
                    allClosed.forEach( icon => icon.style.display = "block" );
                    answer!.classList.add("open");
                    closedIcon!.style.display = "none";
                    openIcon!.style.display = "block";
                    this.isClosed = false;
                } else {
                    answer!.classList.remove("open");
                    closedIcon!.style.display = "block";
                    openIcon!.style.display = "none";
                    this.isClosed = true;
                }
            });
        }
    }
    customElements.define('accordion-item', AccordionItem);
</script>